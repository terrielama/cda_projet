import React, { useEffect, useState } from 'react';
import { useAuth } from '../context/AuthContext'; // Hook d'auth personnalis√©
import { useNavigate } from 'react-router-dom';
import LogoutButton from '../user/LogoutButton'; // Composant bouton logout stylis√©

const UserProfile = () => {
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const { user, logout } = useAuth(); // r√©cup√©ration du user et de la fonction logout
  const navigate = useNavigate();

  // üîÅ Au chargement du composant : on va chercher les commandes de l'utilisateur
  useEffect(() => {
    const token = localStorage.getItem('access_token');
    if (!token) {
      console.log("Pas de token d'acc√®s, utilisateur non connect√©.");
      setError('Utilisateur non connect√©.');
      setLoading(false);
      return;
    }

    // Appel API pour r√©cup√©rer les commandes
    fetch('http://localhost:8001/user/orders/', {
      headers: { Authorization: `Bearer ${token}` }
    })
      .then(res => {
        if (!res.ok) throw new Error('Erreur lors du chargement des commandes');
        return res.json();
      })
      .then(data => {
        console.log('Commandes r√©cup√©r√©es:', data);
        setOrders(data);
      })
      .catch(err => {
        console.error("Erreur lors de la r√©cup√©ration des commandes :", err);
        setError(err.message);
      })
      .finally(() => setLoading(false));
  }, []);

  // üîí Fonction de d√©connexion appel√©e par LogoutButton
  const handleLogout = () => {
    console.log("D√©connexion en cours...");
    logout(); // Ex√©cute la logique de d√©connexion (suppression du token, etc.)
    console.log('D√©connexion r√©ussie ! üëã'); 
    console.log("Utilisateur d√©connect√©, redirection vers la page d'accueil.");
    navigate('/'); // Redirige vers la home
  };

  // ‚åõ Affichage conditionnel selon l‚Äô√©tat de chargement ou erreur
  if (loading) return <div>Chargement‚Ä¶</div>;
  if (error) return <div>Erreur : {error}</div>;

  return (
    <div className="prf">
      <h1 className="prf-title">Mon profil</h1>

      {/* Informations utilisateur */}
      <div className="prf-user">
        <p><strong>Nom :</strong> {user?.last_name || '‚Äî'}</p>
        <p><strong>Pr√©nom :</strong> {user?.first_name || '‚Äî'}</p>
      </div>

      {/* Liste des commandes */}
      <h2 className="prf-subtitle">Mes commandes :</h2>
      {orders.length === 0 ? (
        <p className="prf-empty">Aucune commande trouv√©e.</p>
      ) : (
        orders.map(order => (
          <div key={order.id} className="prf-order">
            <h3 className="prf-order-title">Commande #{order.id}</h3>
            <p><strong>Status :</strong> {order.status}</p>
            <p><strong>Date de cr√©ation :</strong> {new Date(order.created_at).toLocaleString()}</p>
            <p><strong>M√©thode de paiement :</strong> {order.payment_method || 'N/A'}</p>
            <ul className="prf-items">
              {order.items.map((item, idx) => (
                <li key={idx}>Prix total : {item.total_price} ‚Ç¨</li>
              ))}
            </ul>
          </div>
        ))
      )}

      {/* Bouton de d√©connexion personnalis√© avec animation */}
      <LogoutButton onLogout={handleLogout} />
    </div>
  );
};

export default UserProfile;
